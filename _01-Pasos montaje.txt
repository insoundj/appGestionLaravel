#composer create-project --prefer-dist laravel/laravel nombre_de_tu_proyecto

Configurar archivo .env

#php artisan migrate

instalar autenticación
#composer require laravel/breeze --dev
#php artisan breeze:install

arrancar el entorno backend
#php artisan serve

arrancar el entorno frontend (opcional)
#npm install
#npm run dev (sirve para compilar archivos frontend)

instalar spatie-permision para gestionar permisos
#composer require spatie/laravel-permission

configurar = bootstrap>providers.php
'providers' => [
    // ...
    Spatie\Permission\PermissionServiceProvider::class,
];

#php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"
#php artisan optimize:clear
#php artisan migrate

Configurar el modelo USER con:
use Spatie\Permission\Traits\HasRoles;

class user{
	use HasRoles;
}

Crear roles:
#php artisan tinker (crea una consola para ejecutar php en la aplicación)

use Spatie\Permission\Models\Role;
$role = Role::create(['name' => 'Administración']);
$role = Role::create(['name' => 'Responsable']);
$role = Role::create(['name' => 'Asignado']);

//Crear permisos:
use Spatie\Permission\Models\Permission;
$permission = Permission::create(['name' => 'ver']);
$permission = Permission::create(['name' => 'crear']);
$permission = Permission::create(['name' => 'editar']);
$permission = Permission::create(['name' => 'eliminar']);

//Asignar permisos a roles:
$role = Role::findByName('Administracion');
$role->givePermissionTo('ver');
$role->givePermissionTo('crear');
$role->givePermissionTo('editar');
$role->givePermissionTo('eliminar');

$role = Role::findByName('Responsable');
$role->givePermissionTo('ver');
$role->givePermissionTo('crear');

$role = Role::findByName('Asignado');
$role->givePermissionTo('ver');

//Asignar ROL a usuario
use App\Models\User;
$user = User::find(1); //$userId
$role = Role::findByName('Administracion');
$user->assignRole($role);


Creamos el modelo de Documentos
#php artisan make:model Documentos
Rellenar el modelo con las propiedades
#php artisan make:migration create_documentos_table --create=documentos
Rellenamos archivo migración creado y editarlo con los campos necesarios
#php artisan migrate

Creamos el SEEDER que rellenará la tabla documentos
#php artisan make:seeder DocumentosTableSeeder
Rellenamos el seeder para generar los datos

Dentro del metodo RUN

        for($i=1; $i<=50; $i++){

            $relevancia = ['Alta','Media','Baja'];
            $claveAleatoria = array_rand($relevancia);
            $valorRelevancia = $relevancia[$claveAleatoria];

            $numAleatorioSubida = rand(0,15);
            $numAleatorioAprobacion = rand(16,31);

            $documento = [
                'nombre' => 'Documento '.$i,
                'descripcion' => 'Descripción del Documento '.$i,
                'relevancia' => $valorRelevancia,
                'fecha_aprobacion' => now()->subDays($numAleatorioAprobacion),
                'fecha_subida' => now()->subDays($numAleatorioSubida),
                'documento_pdf' => 'documento'.$i.'.pdf',
            ];
            Documentos::create($documento);
        }   

Ejecutar el seeder
#php artisan db:seed --class=DocumentosTableSeeder


Configurar API laravel
#php artisan install:api


Configurar acceso a carpeta almacenamiento
#php artisan storage:link
